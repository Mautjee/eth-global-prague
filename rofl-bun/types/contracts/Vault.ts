/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Vault {
  export type QueryProposalStruct = {
    id: BigNumberish;
    requester: AddressLike;
    sqlQuery: string;
    publicKey: string;
    timestamp: BigNumberish;
    expirationTime: BigNumberish;
    status: BigNumberish;
    governanceProposalId: BigNumberish;
  };

  export type QueryProposalStructOutput = [
    id: bigint,
    requester: string,
    sqlQuery: string,
    publicKey: string,
    timestamp: bigint,
    expirationTime: bigint,
    status: bigint,
    governanceProposalId: bigint
  ] & {
    id: bigint;
    requester: string;
    sqlQuery: string;
    publicKey: string;
    timestamp: bigint;
    expirationTime: bigint;
    status: bigint;
    governanceProposalId: bigint;
  };

  export type CompletedQueryStruct = {
    proposalId: BigNumberish;
    originalQuery: string;
    publicKey: string;
    encryptedResult: string;
    completedTimestamp: BigNumberish;
  };

  export type CompletedQueryStructOutput = [
    proposalId: bigint,
    originalQuery: string,
    publicKey: string,
    encryptedResult: string,
    completedTimestamp: bigint
  ] & {
    proposalId: bigint;
    originalQuery: string;
    publicKey: string;
    encryptedResult: string;
    completedTimestamp: bigint;
  };
}

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "appId"
      | "approveProposal"
      | "checkAndUpdateExpiredProposals"
      | "completedQueries"
      | "consumeProposal"
      | "createGovernanceProposal"
      | "defaultExpirationPeriod"
      | "extendProposalExpiration"
      | "getApprovedProposals"
      | "getCompletedQuery"
      | "getGovernanceProposalId"
      | "getProposal"
      | "getProposalsByStatus"
      | "getUserProposals"
      | "governanceProposalsExecuted"
      | "governor"
      | "isGovernanceProposalExecuted"
      | "owner"
      | "pause"
      | "paused"
      | "proposals"
      | "proposalsByStatus"
      | "proposeQuery"
      | "rejectProposal"
      | "renounceOwnership"
      | "setDefaultExpirationPeriod"
      | "setGovernor"
      | "transferOwnership"
      | "unpause"
      | "userProposals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExpirationPeriodUpdated"
      | "GovernanceProposalCreated"
      | "GovernorUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "ProposalApproved"
      | "ProposalExpired"
      | "ProposalRejected"
      | "ProposalSubmitted"
      | "QueryCompleted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAndUpdateExpiredProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completedQueries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "consumeProposal",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createGovernanceProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultExpirationPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendProposalExpiration",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedProposals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompletedQuery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernanceProposalId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserProposals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceProposalsExecuted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isGovernanceProposalExecuted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsByStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeQuery",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultExpirationPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userProposals",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAndUpdateExpiredProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completedQueries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGovernanceProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultExpirationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendProposalExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompletedQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernanceProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceProposalsExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGovernanceProposalExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultExpirationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userProposals",
    data: BytesLike
  ): Result;
}

export namespace ExpirationPeriodUpdatedEvent {
  export type InputTuple = [newPeriod: BigNumberish];
  export type OutputTuple = [newPeriod: bigint];
  export interface OutputObject {
    newPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernanceProposalCreatedEvent {
  export type InputTuple = [
    vaultProposalId: BigNumberish,
    governanceProposalId: BigNumberish
  ];
  export type OutputTuple = [
    vaultProposalId: bigint,
    governanceProposalId: bigint
  ];
  export interface OutputObject {
    vaultProposalId: bigint;
    governanceProposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernorUpdatedEvent {
  export type InputTuple = [newGovernor: AddressLike];
  export type OutputTuple = [newGovernor: string];
  export interface OutputObject {
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalApprovedEvent {
  export type InputTuple = [proposalId: BigNumberish, approver: AddressLike];
  export type OutputTuple = [proposalId: bigint, approver: string];
  export interface OutputObject {
    proposalId: bigint;
    approver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExpiredEvent {
  export type InputTuple = [proposalId: BigNumberish];
  export type OutputTuple = [proposalId: bigint];
  export interface OutputObject {
    proposalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalRejectedEvent {
  export type InputTuple = [proposalId: BigNumberish, rejecter: AddressLike];
  export type OutputTuple = [proposalId: bigint, rejecter: string];
  export interface OutputObject {
    proposalId: bigint;
    rejecter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalSubmittedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    requester: AddressLike,
    sqlQuery: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    requester: string,
    sqlQuery: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    requester: string;
    sqlQuery: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QueryCompletedEvent {
  export type InputTuple = [proposalId: BigNumberish, requester: AddressLike];
  export type OutputTuple = [proposalId: bigint, requester: string];
  export interface OutputObject {
    proposalId: bigint;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  appId: TypedContractMethod<[], [string], "view">;

  approveProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkAndUpdateExpiredProposals: TypedContractMethod<[], [void], "nonpayable">;

  completedQueries: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        proposalId: bigint;
        originalQuery: string;
        publicKey: string;
        encryptedResult: string;
        completedTimestamp: bigint;
      }
    ],
    "view"
  >;

  consumeProposal: TypedContractMethod<
    [proposalId: BigNumberish, encryptedResult: string],
    [void],
    "nonpayable"
  >;

  createGovernanceProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  defaultExpirationPeriod: TypedContractMethod<[], [bigint], "view">;

  extendProposalExpiration: TypedContractMethod<
    [proposalId: BigNumberish, extension: BigNumberish],
    [void],
    "nonpayable"
  >;

  getApprovedProposals: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [Vault.QueryProposalStructOutput[]],
    "view"
  >;

  getCompletedQuery: TypedContractMethod<
    [proposalId: BigNumberish],
    [Vault.CompletedQueryStructOutput],
    "view"
  >;

  getGovernanceProposalId: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [Vault.QueryProposalStructOutput],
    "view"
  >;

  getProposalsByStatus: TypedContractMethod<
    [status: BigNumberish],
    [Vault.QueryProposalStructOutput[]],
    "view"
  >;

  getUserProposals: TypedContractMethod<
    [user: AddressLike],
    [Vault.QueryProposalStructOutput[]],
    "view"
  >;

  governanceProposalsExecuted: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  governor: TypedContractMethod<[], [string], "view">;

  isGovernanceProposalExecuted: TypedContractMethod<
    [governanceProposalId: BigNumberish],
    [boolean],
    "view"
  >;

  /**
   * Returns the address of the current owner.
   */
  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  /**
   * Returns true if the contract is paused, and false otherwise.
   */
  paused: TypedContractMethod<[], [boolean], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        requester: string;
        sqlQuery: string;
        publicKey: string;
        timestamp: bigint;
        expirationTime: bigint;
        status: bigint;
        governanceProposalId: bigint;
      }
    ],
    "view"
  >;

  proposalsByStatus: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  proposeQuery: TypedContractMethod<
    [sqlQuery: string, publicKey: string],
    [bigint],
    "nonpayable"
  >;

  rejectProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDefaultExpirationPeriod: TypedContractMethod<
    [period: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGovernor: TypedContractMethod<
    [_governor: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  userProposals: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "appId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkAndUpdateExpiredProposals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completedQueries"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        proposalId: bigint;
        originalQuery: string;
        publicKey: string;
        encryptedResult: string;
        completedTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "consumeProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish, encryptedResult: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGovernanceProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultExpirationPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extendProposalExpiration"
  ): TypedContractMethod<
    [proposalId: BigNumberish, extension: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApprovedProposals"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [Vault.QueryProposalStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCompletedQuery"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [Vault.CompletedQueryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGovernanceProposalId"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [Vault.QueryProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalsByStatus"
  ): TypedContractMethod<
    [status: BigNumberish],
    [Vault.QueryProposalStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserProposals"
  ): TypedContractMethod<
    [user: AddressLike],
    [Vault.QueryProposalStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "governanceProposalsExecuted"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isGovernanceProposalExecuted"
  ): TypedContractMethod<
    [governanceProposalId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        requester: string;
        sqlQuery: string;
        publicKey: string;
        timestamp: bigint;
        expirationTime: bigint;
        status: bigint;
        governanceProposalId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalsByStatus"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeQuery"
  ): TypedContractMethod<
    [sqlQuery: string, publicKey: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultExpirationPeriod"
  ): TypedContractMethod<[period: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGovernor"
  ): TypedContractMethod<[_governor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userProposals"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ExpirationPeriodUpdated"
  ): TypedContractEvent<
    ExpirationPeriodUpdatedEvent.InputTuple,
    ExpirationPeriodUpdatedEvent.OutputTuple,
    ExpirationPeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernanceProposalCreated"
  ): TypedContractEvent<
    GovernanceProposalCreatedEvent.InputTuple,
    GovernanceProposalCreatedEvent.OutputTuple,
    GovernanceProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernorUpdated"
  ): TypedContractEvent<
    GovernorUpdatedEvent.InputTuple,
    GovernorUpdatedEvent.OutputTuple,
    GovernorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalApproved"
  ): TypedContractEvent<
    ProposalApprovedEvent.InputTuple,
    ProposalApprovedEvent.OutputTuple,
    ProposalApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExpired"
  ): TypedContractEvent<
    ProposalExpiredEvent.InputTuple,
    ProposalExpiredEvent.OutputTuple,
    ProposalExpiredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalRejected"
  ): TypedContractEvent<
    ProposalRejectedEvent.InputTuple,
    ProposalRejectedEvent.OutputTuple,
    ProposalRejectedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalSubmitted"
  ): TypedContractEvent<
    ProposalSubmittedEvent.InputTuple,
    ProposalSubmittedEvent.OutputTuple,
    ProposalSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "QueryCompleted"
  ): TypedContractEvent<
    QueryCompletedEvent.InputTuple,
    QueryCompletedEvent.OutputTuple,
    QueryCompletedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ExpirationPeriodUpdated(uint256)": TypedContractEvent<
      ExpirationPeriodUpdatedEvent.InputTuple,
      ExpirationPeriodUpdatedEvent.OutputTuple,
      ExpirationPeriodUpdatedEvent.OutputObject
    >;
    ExpirationPeriodUpdated: TypedContractEvent<
      ExpirationPeriodUpdatedEvent.InputTuple,
      ExpirationPeriodUpdatedEvent.OutputTuple,
      ExpirationPeriodUpdatedEvent.OutputObject
    >;

    "GovernanceProposalCreated(uint256,uint256)": TypedContractEvent<
      GovernanceProposalCreatedEvent.InputTuple,
      GovernanceProposalCreatedEvent.OutputTuple,
      GovernanceProposalCreatedEvent.OutputObject
    >;
    GovernanceProposalCreated: TypedContractEvent<
      GovernanceProposalCreatedEvent.InputTuple,
      GovernanceProposalCreatedEvent.OutputTuple,
      GovernanceProposalCreatedEvent.OutputObject
    >;

    "GovernorUpdated(address)": TypedContractEvent<
      GovernorUpdatedEvent.InputTuple,
      GovernorUpdatedEvent.OutputTuple,
      GovernorUpdatedEvent.OutputObject
    >;
    GovernorUpdated: TypedContractEvent<
      GovernorUpdatedEvent.InputTuple,
      GovernorUpdatedEvent.OutputTuple,
      GovernorUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProposalApproved(uint256,address)": TypedContractEvent<
      ProposalApprovedEvent.InputTuple,
      ProposalApprovedEvent.OutputTuple,
      ProposalApprovedEvent.OutputObject
    >;
    ProposalApproved: TypedContractEvent<
      ProposalApprovedEvent.InputTuple,
      ProposalApprovedEvent.OutputTuple,
      ProposalApprovedEvent.OutputObject
    >;

    "ProposalExpired(uint256)": TypedContractEvent<
      ProposalExpiredEvent.InputTuple,
      ProposalExpiredEvent.OutputTuple,
      ProposalExpiredEvent.OutputObject
    >;
    ProposalExpired: TypedContractEvent<
      ProposalExpiredEvent.InputTuple,
      ProposalExpiredEvent.OutputTuple,
      ProposalExpiredEvent.OutputObject
    >;

    "ProposalRejected(uint256,address)": TypedContractEvent<
      ProposalRejectedEvent.InputTuple,
      ProposalRejectedEvent.OutputTuple,
      ProposalRejectedEvent.OutputObject
    >;
    ProposalRejected: TypedContractEvent<
      ProposalRejectedEvent.InputTuple,
      ProposalRejectedEvent.OutputTuple,
      ProposalRejectedEvent.OutputObject
    >;

    "ProposalSubmitted(uint256,address,string)": TypedContractEvent<
      ProposalSubmittedEvent.InputTuple,
      ProposalSubmittedEvent.OutputTuple,
      ProposalSubmittedEvent.OutputObject
    >;
    ProposalSubmitted: TypedContractEvent<
      ProposalSubmittedEvent.InputTuple,
      ProposalSubmittedEvent.OutputTuple,
      ProposalSubmittedEvent.OutputObject
    >;

    "QueryCompleted(uint256,address)": TypedContractEvent<
      QueryCompletedEvent.InputTuple,
      QueryCompletedEvent.OutputTuple,
      QueryCompletedEvent.OutputObject
    >;
    QueryCompleted: TypedContractEvent<
      QueryCompletedEvent.InputTuple,
      QueryCompletedEvent.OutputTuple,
      QueryCompletedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
