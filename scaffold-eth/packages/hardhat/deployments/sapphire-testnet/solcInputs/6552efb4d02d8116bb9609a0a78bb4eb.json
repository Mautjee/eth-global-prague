{
  "language": "Solidity",
  "sources": {
    "contracts/Vigil.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ncontract Vigil {\n    struct SecretMetadata {\n        address creator;\n        string name;\n        /// @notice How long (in seconds) the secret should remain so past the creator's last update.\n        uint256 longevity;\n    }\n\n    event SecretCreated(address indexed creator, string indexed name, uint256 index);\n\n    SecretMetadata[] public _metas;\n    bytes[] private _secrets;\n    /// @dev The unix timestamp at which the address was last seen.\n    mapping(address => uint256) public _lastSeen;\n\n    function createSecret(string calldata name, uint256 longevity, bytes calldata secret) external {\n        _updateLastSeen();\n        _metas.push(SecretMetadata({ creator: msg.sender, name: name, longevity: longevity }));\n        _secrets.push(secret);\n        emit SecretCreated(msg.sender, name, _metas.length - 1);\n    }\n\n    /// Reveal the secret at the specified index.\n    function revealSecret(uint256 index) external view returns (bytes memory) {\n        require(index < _metas.length, \"no such secret\");\n        address creator = _metas[index].creator;\n        uint256 expiry = _lastSeen[creator] + _metas[index].longevity;\n        require(block.timestamp >= expiry, \"not expired\");\n        return _secrets[index];\n    }\n\n    /// Return the time (in seconds since the epoch) at which the owner was last seen, or zero if never seen.\n    function getLastSeen(address owner) external view returns (uint256) {\n        return _lastSeen[owner];\n    }\n\n    function getMetas(uint256 offset, uint256 count) external view returns (SecretMetadata[] memory) {\n        if (offset >= _metas.length) return new SecretMetadata[](0);\n        uint256 c = offset + count <= _metas.length ? count : _metas.length - offset;\n        SecretMetadata[] memory metas = new SecretMetadata[](c);\n        for (uint256 i = 0; i < c; ++i) {\n            metas[i] = _metas[offset + i];\n        }\n        return metas;\n    }\n\n    function refreshSecrets() external {\n        _updateLastSeen();\n    }\n\n    function _updateLastSeen() internal {\n        _lastSeen[msg.sender] = block.timestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}