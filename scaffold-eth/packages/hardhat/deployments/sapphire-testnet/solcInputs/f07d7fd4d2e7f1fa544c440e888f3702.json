{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Master.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Master is ReentrancyGuard, Pausable, Ownable {\n    enum ProposalStatus {\n        Pending,\n        Approved,\n        Completed,\n        Rejected,\n        Expired\n    }\n\n    struct QueryProposal {\n        uint256 id;\n        address requester;\n        string sqlQuery;\n        string publicKey;\n        uint256 timestamp;\n        uint256 expirationTime;\n        ProposalStatus status;\n    }\n\n    struct CompletedQuery {\n        uint256 proposalId;\n        string originalQuery;\n        string publicKey;\n        string encryptedResult;\n        uint256 completedTimestamp;\n    }\n\n    // State Variables\n    uint256 private proposalCounter;\n    bytes21 public appId;\n    uint256 public defaultExpirationPeriod;\n\n    // Mappings\n    mapping(uint256 => QueryProposal) public proposals;\n    mapping(ProposalStatus => uint256[]) public proposalsByStatus;\n    mapping(address => uint256[]) public userProposals;\n    mapping(uint256 => CompletedQuery) public completedQueries;\n\n    // Events\n    event ProposalSubmitted(uint256 indexed proposalId, address indexed requester, string sqlQuery);\n    event ProposalApproved(uint256 indexed proposalId, address indexed approver);\n    event ProposalRejected(uint256 indexed proposalId, address indexed rejecter);\n    event QueryCompleted(uint256 indexed proposalId, address indexed requester);\n    event ProposalExpired(uint256 indexed proposalId);\n    event ExpirationPeriodUpdated(uint256 newPeriod);\n\n    constructor(bytes21 _appId) Ownable(msg.sender) {\n        require(_appId != bytes21(0), \"AppId cannot be zero\");\n        appId = _appId;\n        defaultExpirationPeriod = 7 days;\n        proposalCounter = 0; // Explicitly initialize\n    }\n\n    function proposeQuery(\n        string calldata sqlQuery,\n        string calldata publicKey\n    ) external whenNotPaused nonReentrant returns (uint256) {\n        require(bytes(sqlQuery).length > 0, \"SQL query cannot be empty\");\n        require(bytes(sqlQuery).length <= 1000, \"SQL query too long\");\n        require(bytes(publicKey).length > 0, \"Public key cannot be empty\");\n\n        proposalCounter++;\n        uint256 proposalId = proposalCounter;\n\n        QueryProposal memory newProposal = QueryProposal({\n            id: proposalId,\n            requester: msg.sender,\n            sqlQuery: sqlQuery,\n            publicKey: publicKey,\n            timestamp: block.timestamp,\n            expirationTime: block.timestamp + defaultExpirationPeriod,\n            status: ProposalStatus.Pending\n        });\n\n        proposals[proposalId] = newProposal;\n        proposalsByStatus[ProposalStatus.Pending].push(proposalId);\n        userProposals[msg.sender].push(proposalId);\n\n        emit ProposalSubmitted(proposalId, msg.sender, sqlQuery);\n        return proposalId;\n    }\n\n    function approveProposal(uint256 proposalId) external onlyOwner whenNotPaused nonReentrant {\n        QueryProposal storage proposal = proposals[proposalId];\n        require(proposal.id != 0, \"Proposal does not exist\");\n        require(proposal.status == ProposalStatus.Pending, \"Proposal not pending\");\n        require(block.timestamp < proposal.expirationTime, \"Proposal expired\");\n\n        proposal.status = ProposalStatus.Approved;\n\n        // Remove from Pending array\n        _removeFromStatusArray(ProposalStatus.Pending, proposalId);\n\n        // Add to Approved array\n        proposalsByStatus[ProposalStatus.Approved].push(proposalId);\n\n        emit ProposalApproved(proposalId, msg.sender);\n    }\n\n    function rejectProposal(uint256 proposalId) external onlyOwner whenNotPaused nonReentrant {\n        QueryProposal storage proposal = proposals[proposalId];\n        require(proposal.id != 0, \"Proposal does not exist\");\n        require(proposal.status == ProposalStatus.Pending, \"Proposal not pending\");\n\n        proposal.status = ProposalStatus.Rejected;\n\n        // Remove from Pending array\n        _removeFromStatusArray(ProposalStatus.Pending, proposalId);\n\n        // Add to Rejected array\n        proposalsByStatus[ProposalStatus.Rejected].push(proposalId);\n\n        emit ProposalRejected(proposalId, msg.sender);\n    }\n\n    function getApprovedProposals(uint256 offset, uint256 limit) external view returns (QueryProposal[] memory) {\n        uint256[] storage approvedIds = proposalsByStatus[ProposalStatus.Approved];\n\n        // Handle edge cases\n        if (offset >= approvedIds.length) {\n            return new QueryProposal[](0);\n        }\n\n        uint256 resultLength = approvedIds.length - offset;\n        if (resultLength > limit) {\n            resultLength = limit;\n        }\n\n        QueryProposal[] memory result = new QueryProposal[](resultLength);\n        for (uint256 i = 0; i < resultLength; i++) {\n            result[i] = proposals[approvedIds[offset + i]];\n        }\n        return result;\n    }\n\n    function consumeProposal(uint256 proposalId, string calldata encryptedResult) external whenNotPaused nonReentrant {\n        // TODO: Implement ROFL authorization\n        // Subcall.roflEnsureAuthorizedOrigin(appId);\n\n        QueryProposal storage proposal = proposals[proposalId];\n        require(proposal.id != 0, \"Proposal does not exist\");\n        require(proposal.status == ProposalStatus.Approved, \"Proposal not approved\");\n        require(block.timestamp < proposal.expirationTime, \"Proposal expired\");\n        require(bytes(encryptedResult).length > 0, \"Encrypted result cannot be empty\");\n\n        CompletedQuery memory completedQuery = CompletedQuery({\n            proposalId: proposalId,\n            originalQuery: proposal.sqlQuery,\n            publicKey: proposal.publicKey,\n            encryptedResult: encryptedResult,\n            completedTimestamp: block.timestamp\n        });\n\n        completedQueries[proposalId] = completedQuery;\n        proposal.status = ProposalStatus.Completed;\n\n        // Remove from Approved array\n        _removeFromStatusArray(ProposalStatus.Approved, proposalId);\n\n        // Add to Completed array\n        proposalsByStatus[ProposalStatus.Completed].push(proposalId);\n\n        emit QueryCompleted(proposalId, proposal.requester);\n    }\n\n    function checkAndUpdateExpiredProposals() external {\n        _updateExpiredProposals(ProposalStatus.Pending);\n        _updateExpiredProposals(ProposalStatus.Approved);\n    }\n\n    function _updateExpiredProposals(ProposalStatus status) internal {\n        uint256[] storage statusProposals = proposalsByStatus[status];\n\n        // Use a temporary array to track expired proposals to avoid array modification during iteration\n        uint256[] memory expiredIds = new uint256[](statusProposals.length);\n        uint256 expiredCount = 0;\n\n        for (uint256 i = 0; i < statusProposals.length; i++) {\n            uint256 proposalId = statusProposals[i];\n            QueryProposal storage proposal = proposals[proposalId];\n            if (block.timestamp >= proposal.expirationTime) {\n                expiredIds[expiredCount] = proposalId;\n                expiredCount++;\n            }\n        }\n\n        // Process expired proposals\n        for (uint256 i = 0; i < expiredCount; i++) {\n            uint256 proposalId = expiredIds[i];\n            proposals[proposalId].status = ProposalStatus.Expired;\n            _removeFromStatusArray(status, proposalId);\n            proposalsByStatus[ProposalStatus.Expired].push(proposalId);\n            emit ProposalExpired(proposalId);\n        }\n    }\n\n    function _removeFromStatusArray(ProposalStatus status, uint256 proposalId) internal {\n        uint256[] storage statusArray = proposalsByStatus[status];\n        for (uint256 i = 0; i < statusArray.length; i++) {\n            if (statusArray[i] == proposalId) {\n                statusArray[i] = statusArray[statusArray.length - 1];\n                statusArray.pop();\n                break;\n            }\n        }\n    }\n\n    function setDefaultExpirationPeriod(uint256 period) external onlyOwner {\n        require(period > 0, \"Expiration period must be greater than 0\");\n        require(period <= 365 days, \"Expiration period too long\");\n        defaultExpirationPeriod = period;\n        emit ExpirationPeriodUpdated(period);\n    }\n\n    function extendProposalExpiration(uint256 proposalId, uint256 extension) external onlyOwner {\n        QueryProposal storage proposal = proposals[proposalId];\n        require(proposal.id != 0, \"Proposal does not exist\");\n        require(extension > 0, \"Extension must be greater than 0\");\n        require(extension <= 365 days, \"Extension too long\");\n        proposal.expirationTime += extension;\n    }\n\n    function getProposalsByStatus(ProposalStatus status) external view returns (QueryProposal[] memory) {\n        uint256[] storage proposalIds = proposalsByStatus[status];\n        QueryProposal[] memory result = new QueryProposal[](proposalIds.length);\n        for (uint256 i = 0; i < proposalIds.length; i++) {\n            result[i] = proposals[proposalIds[i]];\n        }\n        return result;\n    }\n\n    function getUserProposals(address user) external view returns (QueryProposal[] memory) {\n        require(user != address(0), \"Invalid user address\");\n        uint256[] storage userProposalIds = userProposals[user];\n        QueryProposal[] memory result = new QueryProposal[](userProposalIds.length);\n        for (uint256 i = 0; i < userProposalIds.length; i++) {\n            result[i] = proposals[userProposalIds[i]];\n        }\n        return result;\n    }\n\n    function getCompletedQuery(uint256 proposalId) external view returns (CompletedQuery memory) {\n        require(completedQueries[proposalId].proposalId != 0, \"Completed query does not exist\");\n        return completedQueries[proposalId];\n    }\n\n    function getProposal(uint256 proposalId) external view returns (QueryProposal memory) {\n        require(proposals[proposalId].id != 0, \"Proposal does not exist\");\n        return proposals[proposalId];\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}