{
  "address": "0x8D0bFCf2f1cE1B0D3A27e2E7Bdbd62E017B4Cf90",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes21",
          "name": "_appId",
          "type": "bytes21"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "ExpirationPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rejecter",
          "type": "address"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sqlQuery",
          "type": "string"
        }
      ],
      "name": "ProposalSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "QueryCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "internalType": "bytes21",
          "name": "",
          "type": "bytes21"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "approveProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkAndUpdateExpiredProposals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "completedQueries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "originalQuery",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicKey",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "encryptedResult",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "completedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "encryptedResult",
          "type": "string"
        }
      ],
      "name": "consumeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExpirationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "extension",
          "type": "uint256"
        }
      ],
      "name": "extendProposalExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getApprovedProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "sqlQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.ProposalStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.QueryProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getCompletedQuery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "originalQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedResult",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "completedTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.CompletedQuery",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "sqlQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.ProposalStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.QueryProposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Vault.ProposalStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "getProposalsByStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "sqlQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.ProposalStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.QueryProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "sqlQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.ProposalStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault.QueryProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "sqlQuery",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicKey",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "enum Vault.ProposalStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Vault.ProposalStatus",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalsByStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sqlQuery",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicKey",
          "type": "string"
        }
      ],
      "name": "proposeQuery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "rejectProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "setDefaultExpirationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf28b65df73574fd47921af67d1ccdf0a102535c2ae8f1a7c079aa4202687772b",
  "receipt": {
    "to": null,
    "from": "0xdC789c77219a2E1845b53aBa758956950dc14284",
    "contractAddress": "0x8D0bFCf2f1cE1B0D3A27e2E7Bdbd62E017B4Cf90",
    "transactionIndex": 0,
    "gasUsed": "2582855",
    "logsBloom": "0x000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000010000000000000000000000000000000000000200000000000000000008000000000000000000000040000000004000000000000000000000100000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000a0000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4a653d802203bedb72c59dc820fce654474df7ba9b8bc70f3f08808030514dca",
    "transactionHash": "0xf28b65df73574fd47921af67d1ccdf0a102535c2ae8f1a7c079aa4202687772b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11934351,
        "transactionHash": "0xf28b65df73574fd47921af67d1ccdf0a102535c2ae8f1a7c079aa4202687772b",
        "address": "0x8D0bFCf2f1cE1B0D3A27e2E7Bdbd62E017B4Cf90",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dc789c77219a2e1845b53aba758956950dc14284"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4a653d802203bedb72c59dc820fce654474df7ba9b8bc70f3f08808030514dca"
      }
    ],
    "blockNumber": 11934351,
    "cumulativeGasUsed": "2582855",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x123456789012345678901234567890123456789012"
  ],
  "numDeployments": 4,
  "solcInputHash": "ce7ceebd42da357494af9a2e7bd53dc8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes21\",\"name\":\"_appId\",\"type\":\"bytes21\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"ExpirationPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rejecter\",\"type\":\"address\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"QueryCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"bytes21\",\"name\":\"\",\"type\":\"bytes21\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"approveProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAndUpdateExpiredProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"completedQueries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"originalQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedResult\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"completedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"encryptedResult\",\"type\":\"string\"}],\"name\":\"consumeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExpirationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extension\",\"type\":\"uint256\"}],\"name\":\"extendProposalExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getApprovedProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.QueryProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getCompletedQuery\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"originalQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedResult\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"completedTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.CompletedQuery\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.QueryProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"getProposalsByStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.QueryProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault.QueryProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalsByStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"}],\"name\":\"proposeQuery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"rejectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setDefaultExpirationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Vault is ReentrancyGuard, Pausable, Ownable {\\n    enum ProposalStatus {\\n        Pending,\\n        Approved,\\n        Completed,\\n        Rejected,\\n        Expired\\n    }\\n\\n    struct QueryProposal {\\n        uint256 id;\\n        address requester;\\n        string sqlQuery;\\n        string publicKey;\\n        uint256 timestamp;\\n        uint256 expirationTime;\\n        ProposalStatus status;\\n    }\\n\\n    struct CompletedQuery {\\n        uint256 proposalId;\\n        string originalQuery;\\n        string publicKey;\\n        string encryptedResult;\\n        uint256 completedTimestamp;\\n    }\\n\\n    // State Variables\\n    uint256 private proposalCounter;\\n    bytes21 public appId;\\n    uint256 public defaultExpirationPeriod;\\n\\n    // Mappings\\n    mapping(uint256 => QueryProposal) public proposals;\\n    mapping(ProposalStatus => uint256[]) public proposalsByStatus;\\n    mapping(address => uint256[]) public userProposals;\\n    mapping(uint256 => CompletedQuery) public completedQueries;\\n\\n    // Events\\n    event ProposalSubmitted(uint256 indexed proposalId, address indexed requester, string sqlQuery);\\n    event ProposalApproved(uint256 indexed proposalId, address indexed approver);\\n    event ProposalRejected(uint256 indexed proposalId, address indexed rejecter);\\n    event QueryCompleted(uint256 indexed proposalId, address indexed requester);\\n    event ProposalExpired(uint256 indexed proposalId);\\n    event ExpirationPeriodUpdated(uint256 newPeriod);\\n\\n    constructor(bytes21 _appId) Ownable(msg.sender) {\\n        require(_appId != bytes21(0), \\\"AppId cannot be zero\\\");\\n        appId = _appId;\\n        defaultExpirationPeriod = 7 days;\\n        proposalCounter = 0; // Explicitly initialize\\n    }\\n\\n    function proposeQuery(\\n        string calldata sqlQuery,\\n        string calldata publicKey\\n    ) external whenNotPaused nonReentrant returns (uint256) {\\n        require(bytes(sqlQuery).length > 0, \\\"SQL query cannot be empty\\\");\\n        require(bytes(sqlQuery).length <= 1000, \\\"SQL query too long\\\");\\n        require(bytes(publicKey).length > 0, \\\"Public key cannot be empty\\\");\\n\\n        proposalCounter++;\\n        uint256 proposalId = proposalCounter;\\n\\n        QueryProposal memory newProposal = QueryProposal({\\n            id: proposalId,\\n            requester: msg.sender,\\n            sqlQuery: sqlQuery,\\n            publicKey: publicKey,\\n            timestamp: block.timestamp,\\n            expirationTime: block.timestamp + defaultExpirationPeriod,\\n            status: ProposalStatus.Pending\\n        });\\n\\n        proposals[proposalId] = newProposal;\\n        proposalsByStatus[ProposalStatus.Pending].push(proposalId);\\n        userProposals[msg.sender].push(proposalId);\\n\\n        emit ProposalSubmitted(proposalId, msg.sender, sqlQuery);\\n        return proposalId;\\n    }\\n\\n    function approveProposal(uint256 proposalId) external onlyOwner whenNotPaused nonReentrant {\\n        QueryProposal storage proposal = proposals[proposalId];\\n        require(proposal.id != 0, \\\"Proposal does not exist\\\");\\n        require(proposal.status == ProposalStatus.Pending, \\\"Proposal not pending\\\");\\n        require(block.timestamp < proposal.expirationTime, \\\"Proposal expired\\\");\\n\\n        proposal.status = ProposalStatus.Approved;\\n\\n        // Remove from Pending array\\n        _removeFromStatusArray(ProposalStatus.Pending, proposalId);\\n\\n        // Add to Approved array\\n        proposalsByStatus[ProposalStatus.Approved].push(proposalId);\\n\\n        emit ProposalApproved(proposalId, msg.sender);\\n    }\\n\\n    function rejectProposal(uint256 proposalId) external onlyOwner whenNotPaused nonReentrant {\\n        QueryProposal storage proposal = proposals[proposalId];\\n        require(proposal.id != 0, \\\"Proposal does not exist\\\");\\n        require(proposal.status == ProposalStatus.Pending, \\\"Proposal not pending\\\");\\n\\n        proposal.status = ProposalStatus.Rejected;\\n\\n        // Remove from Pending array\\n        _removeFromStatusArray(ProposalStatus.Pending, proposalId);\\n\\n        // Add to Rejected array\\n        proposalsByStatus[ProposalStatus.Rejected].push(proposalId);\\n\\n        emit ProposalRejected(proposalId, msg.sender);\\n    }\\n\\n    function getApprovedProposals(uint256 offset, uint256 limit) external view returns (QueryProposal[] memory) {\\n        uint256[] storage approvedIds = proposalsByStatus[ProposalStatus.Approved];\\n\\n        // Handle edge cases\\n        if (offset >= approvedIds.length) {\\n            return new QueryProposal[](0);\\n        }\\n\\n        uint256 resultLength = approvedIds.length - offset;\\n        if (resultLength > limit) {\\n            resultLength = limit;\\n        }\\n\\n        QueryProposal[] memory result = new QueryProposal[](resultLength);\\n        for (uint256 i = 0; i < resultLength; i++) {\\n            result[i] = proposals[approvedIds[offset + i]];\\n        }\\n        return result;\\n    }\\n\\n    function consumeProposal(uint256 proposalId, string calldata encryptedResult) external whenNotPaused nonReentrant {\\n        // TODO: Implement ROFL authorization\\n        // Subcall.roflEnsureAuthorizedOrigin(appId);\\n\\n        QueryProposal storage proposal = proposals[proposalId];\\n        require(proposal.id != 0, \\\"Proposal does not exist\\\");\\n        require(proposal.status == ProposalStatus.Approved, \\\"Proposal not approved\\\");\\n        require(block.timestamp < proposal.expirationTime, \\\"Proposal expired\\\");\\n        require(bytes(encryptedResult).length > 0, \\\"Encrypted result cannot be empty\\\");\\n\\n        CompletedQuery memory completedQuery = CompletedQuery({\\n            proposalId: proposalId,\\n            originalQuery: proposal.sqlQuery,\\n            publicKey: proposal.publicKey,\\n            encryptedResult: encryptedResult,\\n            completedTimestamp: block.timestamp\\n        });\\n\\n        completedQueries[proposalId] = completedQuery;\\n        proposal.status = ProposalStatus.Completed;\\n\\n        // Remove from Approved array\\n        _removeFromStatusArray(ProposalStatus.Approved, proposalId);\\n\\n        // Add to Completed array\\n        proposalsByStatus[ProposalStatus.Completed].push(proposalId);\\n\\n        emit QueryCompleted(proposalId, proposal.requester);\\n    }\\n\\n    function checkAndUpdateExpiredProposals() external {\\n        _updateExpiredProposals(ProposalStatus.Pending);\\n        _updateExpiredProposals(ProposalStatus.Approved);\\n    }\\n\\n    function _updateExpiredProposals(ProposalStatus status) internal {\\n        uint256[] storage statusProposals = proposalsByStatus[status];\\n\\n        // Use a temporary array to track expired proposals to avoid array modification during iteration\\n        uint256[] memory expiredIds = new uint256[](statusProposals.length);\\n        uint256 expiredCount = 0;\\n\\n        for (uint256 i = 0; i < statusProposals.length; i++) {\\n            uint256 proposalId = statusProposals[i];\\n            QueryProposal storage proposal = proposals[proposalId];\\n            if (block.timestamp >= proposal.expirationTime) {\\n                expiredIds[expiredCount] = proposalId;\\n                expiredCount++;\\n            }\\n        }\\n\\n        // Process expired proposals\\n        for (uint256 i = 0; i < expiredCount; i++) {\\n            uint256 proposalId = expiredIds[i];\\n            proposals[proposalId].status = ProposalStatus.Expired;\\n            _removeFromStatusArray(status, proposalId);\\n            proposalsByStatus[ProposalStatus.Expired].push(proposalId);\\n            emit ProposalExpired(proposalId);\\n        }\\n    }\\n\\n    function _removeFromStatusArray(ProposalStatus status, uint256 proposalId) internal {\\n        uint256[] storage statusArray = proposalsByStatus[status];\\n        for (uint256 i = 0; i < statusArray.length; i++) {\\n            if (statusArray[i] == proposalId) {\\n                statusArray[i] = statusArray[statusArray.length - 1];\\n                statusArray.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function setDefaultExpirationPeriod(uint256 period) external onlyOwner {\\n        require(period > 0, \\\"Expiration period must be greater than 0\\\");\\n        require(period <= 365 days, \\\"Expiration period too long\\\");\\n        defaultExpirationPeriod = period;\\n        emit ExpirationPeriodUpdated(period);\\n    }\\n\\n    function extendProposalExpiration(uint256 proposalId, uint256 extension) external onlyOwner {\\n        QueryProposal storage proposal = proposals[proposalId];\\n        require(proposal.id != 0, \\\"Proposal does not exist\\\");\\n        require(extension > 0, \\\"Extension must be greater than 0\\\");\\n        require(extension <= 365 days, \\\"Extension too long\\\");\\n        proposal.expirationTime += extension;\\n    }\\n\\n    function getProposalsByStatus(ProposalStatus status) external view returns (QueryProposal[] memory) {\\n        uint256[] storage proposalIds = proposalsByStatus[status];\\n        QueryProposal[] memory result = new QueryProposal[](proposalIds.length);\\n        for (uint256 i = 0; i < proposalIds.length; i++) {\\n            result[i] = proposals[proposalIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    function getUserProposals(address user) external view returns (QueryProposal[] memory) {\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        uint256[] storage userProposalIds = userProposals[user];\\n        QueryProposal[] memory result = new QueryProposal[](userProposalIds.length);\\n        for (uint256 i = 0; i < userProposalIds.length; i++) {\\n            result[i] = proposals[userProposalIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    function getCompletedQuery(uint256 proposalId) external view returns (CompletedQuery memory) {\\n        require(completedQueries[proposalId].proposalId != 0, \\\"Completed query does not exist\\\");\\n        return completedQueries[proposalId];\\n    }\\n\\n    function getProposal(uint256 proposalId) external view returns (QueryProposal memory) {\\n        require(proposals[proposalId].id != 0, \\\"Proposal does not exist\\\");\\n        return proposals[proposalId];\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0x0d027285dcc9939593cdf85436b3f06c6d3e708794e35a3f2e73ab1514d119b1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 296,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 186,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_owner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 400,
        "contract": "contracts/Vault.sol:Vault",
        "label": "proposalCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 402,
        "contract": "contracts/Vault.sol:Vault",
        "label": "appId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes21"
      },
      {
        "astId": 404,
        "contract": "contracts/Vault.sol:Vault",
        "label": "defaultExpirationPeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 409,
        "contract": "contracts/Vault.sol:Vault",
        "label": "proposals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(QueryProposal)387_storage)"
      },
      {
        "astId": 415,
        "contract": "contracts/Vault.sol:Vault",
        "label": "proposalsByStatus",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(ProposalStatus)371,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 420,
        "contract": "contracts/Vault.sol:Vault",
        "label": "userProposals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 425,
        "contract": "contracts/Vault.sol:Vault",
        "label": "completedQueries",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(CompletedQuery)398_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes21": {
        "encoding": "inplace",
        "label": "bytes21",
        "numberOfBytes": "21"
      },
      "t_enum(ProposalStatus)371": {
        "encoding": "inplace",
        "label": "enum Vault.ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_enum(ProposalStatus)371,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ProposalStatus)371",
        "label": "mapping(enum Vault.ProposalStatus => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(CompletedQuery)398_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.CompletedQuery)",
        "numberOfBytes": "32",
        "value": "t_struct(CompletedQuery)398_storage"
      },
      "t_mapping(t_uint256,t_struct(QueryProposal)387_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.QueryProposal)",
        "numberOfBytes": "32",
        "value": "t_struct(QueryProposal)387_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CompletedQuery)398_storage": {
        "encoding": "inplace",
        "label": "struct Vault.CompletedQuery",
        "members": [
          {
            "astId": 389,
            "contract": "contracts/Vault.sol:Vault",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 391,
            "contract": "contracts/Vault.sol:Vault",
            "label": "originalQuery",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 393,
            "contract": "contracts/Vault.sol:Vault",
            "label": "publicKey",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 395,
            "contract": "contracts/Vault.sol:Vault",
            "label": "encryptedResult",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 397,
            "contract": "contracts/Vault.sol:Vault",
            "label": "completedTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(QueryProposal)387_storage": {
        "encoding": "inplace",
        "label": "struct Vault.QueryProposal",
        "members": [
          {
            "astId": 373,
            "contract": "contracts/Vault.sol:Vault",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 375,
            "contract": "contracts/Vault.sol:Vault",
            "label": "requester",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 377,
            "contract": "contracts/Vault.sol:Vault",
            "label": "sqlQuery",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 379,
            "contract": "contracts/Vault.sol:Vault",
            "label": "publicKey",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 381,
            "contract": "contracts/Vault.sol:Vault",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 383,
            "contract": "contracts/Vault.sol:Vault",
            "label": "expirationTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 386,
            "contract": "contracts/Vault.sol:Vault",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ProposalStatus)371"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}