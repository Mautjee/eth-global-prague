{
  "address": "0xf6A981B3cc55f7370195A22cF719a42BB728A84c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes21",
          "name": "_appId",
          "type": "bytes21"
        },
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPeriod",
          "type": "uint256"
        }
      ],
      "name": "ExpirationPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultProposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "governanceProposalId",
          "type": "uint256"
        }
      ],
      "name": "GovernanceProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ProposalApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rejecter",
          "type": "address"
        }
      ],
      "name": "ProposalRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "sqlQuery",
          "type": "string"
        }
      ],
      "name": "ProposalSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "QueryCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "internalType": "bytes21",
          "name": "",
          "type": "bytes21"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "approveProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkAndUpdateExpiredProposals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "completedQueries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "originalQuery",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicKey",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "encryptedResult",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "completedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "encryptedResult",
          "type": "string"
        }
      ],
      "name": "consumeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "createGovernanceProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExpirationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "extension",
          "type": "uint256"
        }
      ],
      "name": "extendProposalExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getApprovedProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "sqlQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.ProposalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "governanceProposalId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.QueryProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getCompletedQuery",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "originalQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "encryptedResult",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "completedTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.CompletedQuery",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getGovernanceProposalId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "sqlQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.ProposalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "governanceProposalId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.QueryProposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Vault.ProposalStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "getProposalsByStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "sqlQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.ProposalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "governanceProposalId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.QueryProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requester",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "sqlQuery",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "publicKey",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "enum Vault.ProposalStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "governanceProposalId",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.QueryProposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "governanceProposalsExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "contract IGovernor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "governanceProposalId",
          "type": "uint256"
        }
      ],
      "name": "isGovernanceProposalExecuted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "sqlQuery",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicKey",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "enum Vault.ProposalStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "governanceProposalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Vault.ProposalStatus",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalsByStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "sqlQuery",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicKey",
          "type": "string"
        }
      ],
      "name": "proposeQuery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "rejectProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "setDefaultExpirationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "setGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd232a0e280bf19897af0bcdd978b9dc90c2ea5d9494e028afe170836a6536abe",
  "receipt": {
    "to": null,
    "from": "0xdC789c77219a2E1845b53aBa758956950dc14284",
    "contractAddress": "0xf6A981B3cc55f7370195A22cF719a42BB728A84c",
    "transactionIndex": 0,
    "gasUsed": "3054678",
    "logsBloom": "0x
    "blockHash": "0x2023e66fd278860c15b02d1cfe1319c252bc70907c76442eb61118cabe34a869",
    "transactionHash": "0xd232a0e280bf19897af0bcdd978b9dc90c2ea5d9494e028afe170836a6536abe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11936149,
        "transactionHash": "0xd232a0e280bf19897af0bcdd978b9dc90c2ea5d9494e028afe170836a6536abe",
        "address": "0xf6A981B3cc55f7370195A22cF719a42BB728A84c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dc789c77219a2e1845b53aba758956950dc14284"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2023e66fd278860c15b02d1cfe1319c252bc70907c76442eb61118cabe34a869"
      }
    ],
    "blockNumber": 11936149,
    "cumulativeGasUsed": "3054678",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x123456789012345678901234567890123456789012",
    "0xB1344b6d9caBF428A9458fE1B61485eE6089C8D8"
  ],
  "numDeployments": 8,
  "solcInputHash": "4ad454ac8730f54cecec2392659b333d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes21\",\"name\":\"_appId\",\"type\":\"bytes21\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"ExpirationPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultProposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"governanceProposalId\",\"type\":\"uint256\"}],\"name\":\"GovernanceProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ProposalApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rejecter\",\"type\":\"address\"}],\"name\":\"ProposalRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"}],\"name\":\"ProposalSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"QueryCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"bytes21\",\"name\":\"\",\"type\":\"bytes21\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"approveProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAndUpdateExpiredProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"completedQueries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"originalQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedResult\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"completedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"encryptedResult\",\"type\":\"string\"}],\"name\":\"consumeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"createGovernanceProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExpirationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extension\",\"type\":\"uint256\"}],\"name\":\"extendProposalExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getApprovedProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"governanceProposalId\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.QueryProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getCompletedQuery\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"originalQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"encryptedResult\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"completedTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.CompletedQuery\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getGovernanceProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"governanceProposalId\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.QueryProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"getProposalsByStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"governanceProposalId\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.QueryProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"governanceProposalId\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.QueryProposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"governanceProposalsExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"governanceProposalId\",\"type\":\"uint256\"}],\"name\":\"isGovernanceProposalExecuted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"governanceProposalId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Vault.ProposalStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalsByStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sqlQuery\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"}],\"name\":\"proposeQuery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"rejectProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setDefaultExpirationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (governance/IGovernor.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../interfaces/IERC165.sol\\\";\\nimport {IERC6372} from \\\"../interfaces/IERC6372.sol\\\";\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * NOTE: Event parameters lack the `indexed` keyword for compatibility with GovernorBravo events.\\n * Making event parameters `indexed` affects how events are decoded, potentially breaking existing indexers.\\n */\\ninterface IGovernor is IERC165, IERC6372 {\\n    enum ProposalState {\\n        Pending,\\n        Active,\\n        Canceled,\\n        Defeated,\\n        Succeeded,\\n        Queued,\\n        Expired,\\n        Executed\\n    }\\n\\n    /**\\n     * @dev Empty proposal or a mismatch between the parameters length for a proposal call.\\n     */\\n    error GovernorInvalidProposalLength(uint256 targets, uint256 calldatas, uint256 values);\\n\\n    /**\\n     * @dev The vote was already cast.\\n     */\\n    error GovernorAlreadyCastVote(address voter);\\n\\n    /**\\n     * @dev Token deposits are disabled in this contract.\\n     */\\n    error GovernorDisabledDeposit();\\n\\n    /**\\n     * @dev The `account` is not the governance executor.\\n     */\\n    error GovernorOnlyExecutor(address account);\\n\\n    /**\\n     * @dev The `proposalId` doesn't exist.\\n     */\\n    error GovernorNonexistentProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The current state of a proposal is not the required for performing an operation.\\n     * The `expectedStates` is a bitmap with the bits enabled for each ProposalState enum position\\n     * counting from right to left.\\n     *\\n     * NOTE: If `expectedState` is `bytes32(0)`, the proposal is expected to not be in any state (i.e. not exist).\\n     * This is the case when a proposal that is expected to be unset is already initiated (the proposal is duplicated).\\n     *\\n     * See {Governor-_encodeStateBitmap}.\\n     */\\n    error GovernorUnexpectedProposalState(uint256 proposalId, ProposalState current, bytes32 expectedStates);\\n\\n    /**\\n     * @dev The voting period set is not a valid period.\\n     */\\n    error GovernorInvalidVotingPeriod(uint256 votingPeriod);\\n\\n    /**\\n     * @dev The `proposer` does not have the required votes to create a proposal.\\n     */\\n    error GovernorInsufficientProposerVotes(address proposer, uint256 votes, uint256 threshold);\\n\\n    /**\\n     * @dev The `proposer` is not allowed to create a proposal.\\n     */\\n    error GovernorRestrictedProposer(address proposer);\\n\\n    /**\\n     * @dev The vote type used is not valid for the corresponding counting module.\\n     */\\n    error GovernorInvalidVoteType();\\n\\n    /**\\n     * @dev The provided params buffer is not supported by the counting module.\\n     */\\n    error GovernorInvalidVoteParams();\\n\\n    /**\\n     * @dev Queue operation is not implemented for this governor. Execute should be called directly.\\n     */\\n    error GovernorQueueNotImplemented();\\n\\n    /**\\n     * @dev The proposal hasn't been queued yet.\\n     */\\n    error GovernorNotQueuedProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The proposal has already been queued.\\n     */\\n    error GovernorAlreadyQueuedProposal(uint256 proposalId);\\n\\n    /**\\n     * @dev The provided signature is not valid for the expected `voter`.\\n     * If the `voter` is a contract, the signature is not valid using {IERC1271-isValidSignature}.\\n     */\\n    error GovernorInvalidSignature(address voter);\\n\\n    /**\\n     * @dev The given `account` is unable to cancel the proposal with given `proposalId`.\\n     */\\n    error GovernorUnableToCancel(uint256 proposalId, address account);\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 voteStart,\\n        uint256 voteEnd,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is queued.\\n     */\\n    event ProposalQueued(uint256 proposalId, uint256 etaSeconds);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast without params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @dev Emitted when a vote is cast with params.\\n     *\\n     * Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\\n     * `params` are additional encoded parameters. Their interpretation  also depends on the voting module used.\\n     */\\n    event VoteCastWithParams(\\n        address indexed voter,\\n        uint256 proposalId,\\n        uint8 support,\\n        uint256 weight,\\n        string reason,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the EIP-712 domain separator).\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the EIP-712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() external view returns (string memory);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique\\n     * name that describes the behavior. For example:\\n     *\\n     * - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain.\\n     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() external view returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details.\\n     *\\n     * NOTE: For all off-chain and external calls, use {getProposalId}.\\n     */\\n    function hashProposal(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external pure returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Function used to get the proposal id from the proposal details.\\n     */\\n    function getProposalId(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) external view returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The number of votes required in order for a voter to become a proposer.\\n     */\\n    function proposalThreshold() external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint used to retrieve user's votes and quorum. If using block number (as per Compound's Comp), the\\n     * snapshot is performed at the end of this block. Hence, voting for this proposal starts at the beginning of the\\n     * following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Timepoint at which votes close. If using block number, votes close at the end of this block, so it is\\n     * possible to cast a vote during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The account that created a proposal.\\n     */\\n    function proposalProposer(uint256 proposalId) external view returns (address);\\n\\n    /**\\n     * @notice module:core\\n     * @dev The time when a queued proposal becomes executable (\\\"ETA\\\"). Unlike {proposalSnapshot} and\\n     * {proposalDeadline}, this doesn't use the governor clock, and instead relies on the executor's clock which may be\\n     * different. In most cases this will be a timestamp.\\n     */\\n    function proposalEta(uint256 proposalId) external view returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Whether a proposal needs to be queued before execution.\\n     */\\n    function proposalNeedsQueuing(uint256 proposalId) external view returns (bool);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends\\n     * on the clock (see ERC-6372) this contract uses.\\n     *\\n     * This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a\\n     * proposal starts.\\n     *\\n     * NOTE: While this interface returns a uint256, timepoints are stored as uint48 following the ERC-6372 clock type.\\n     * Consequently this value must fit in a uint48 (when added to the current clock). See {IERC6372-clock}.\\n     */\\n    function votingDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock\\n     * (see ERC-6372) this contract uses.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     *\\n     * NOTE: This value is stored when the proposal is submitted so that possible changes to the value do not affect\\n     * proposals that have already been submitted. The type used to save it is a uint32. Consequently, while this\\n     * interface returns a uint256, the value it returns should fit in a uint32.\\n     */\\n    function votingPeriod() external view returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the\\n     * quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `timepoint` given additional encoded parameters.\\n     */\\n    function getVotesWithParams(\\n        address account,\\n        uint256 timepoint,\\n        bytes memory params\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns whether `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start after a delay specified by {IGovernor-votingDelay} and lasts for a\\n     * duration specified by {IGovernor-votingPeriod}.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     *\\n     * NOTE: The state of the Governor and `targets` may change between the proposal creation and its execution.\\n     * This may be the result of third party actions on the targeted contracts, or other governor proposals.\\n     * For example, the balance of this contract could be updated or its access control permissions may be modified,\\n     * possibly compromising the proposal's ability to execute successfully (e.g. the governor doesn't have enough\\n     * value to cover a proposal with multiple transfers).\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) external returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Queue a proposal. Some governors require this step to be performed before execution can happen. If queuing\\n     * is not necessary, this function may revert.\\n     * Queuing a proposal requires the quorum to be reached, the vote to be successful, and the deadline to be reached.\\n     *\\n     * Emits a {ProposalQueued} event.\\n     */\\n    function queue(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached. Depending on the governor it might also be required that the proposal was queued and\\n     * that some delay passed.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * NOTE: Some modules can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external payable returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cancel a proposal. A proposal is cancellable by the proposer, but only while it is Pending state, i.e.\\n     * before the vote starts.\\n     *\\n     * Emits a {ProposalCanceled} event.\\n     */\\n    function cancel(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) external returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParams(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason,\\n        bytes memory params\\n    ) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the voter's signature, including ERC-1271 signature support.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        address voter,\\n        bytes memory signature\\n    ) external returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason and additional encoded parameters using the voter's signature,\\n     * including ERC-1271 signature support.\\n     *\\n     * Emits a {VoteCast} or {VoteCastWithParams} event depending on the length of params.\\n     */\\n    function castVoteWithReasonAndParamsBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        address voter,\\n        string calldata reason,\\n        bytes memory params,\\n        bytes memory signature\\n    ) external returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0xeb587bd3f646da7897e80f4ea71dc5ee324e985ca2d17136021aa2443f41a73f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/governance/IGovernor.sol\\\";\\n\\ncontract Vault is ReentrancyGuard, Pausable, Ownable {\\n    enum ProposalStatus {\\n        Pending,\\n        Approved,\\n        Completed,\\n        Rejected,\\n        Expired\\n    }\\n\\n    struct QueryProposal {\\n        uint256 id;\\n        address requester;\\n        string sqlQuery;\\n        string publicKey;\\n        uint256 timestamp;\\n        uint256 expirationTime;\\n        ProposalStatus status;\\n        uint256 governanceProposalId;\\n    }\\n\\n    struct CompletedQuery {\\n        uint256 proposalId;\\n        string originalQuery;\\n        string publicKey;\\n        string encryptedResult;\\n        uint256 completedTimestamp;\\n    }\\n\\n    // State Variables\\n    uint256 private proposalCounter;\\n    bytes21 public appId;\\n    uint256 public defaultExpirationPeriod;\\n    IGovernor public governor;\\n\\n    // Mappings\\n    mapping(uint256 => QueryProposal) public proposals;\\n    mapping(ProposalStatus => uint256[]) public proposalsByStatus;\\n    mapping(address => uint256[]) public userProposals;\\n    mapping(uint256 => CompletedQuery) public completedQueries;\\n    mapping(uint256 => bool) public governanceProposalsExecuted;\\n\\n    // Events\\n    event ProposalSubmitted(uint256 indexed proposalId, address indexed requester, string sqlQuery);\\n    event ProposalApproved(uint256 indexed proposalId, address indexed approver);\\n    event ProposalRejected(uint256 indexed proposalId, address indexed rejecter);\\n    event QueryCompleted(uint256 indexed proposalId, address indexed requester);\\n    event ProposalExpired(uint256 indexed proposalId);\\n    event ExpirationPeriodUpdated(uint256 newPeriod);\\n    event GovernorUpdated(address indexed newGovernor);\\n    event GovernanceProposalCreated(uint256 indexed vaultProposalId, uint256 indexed governanceProposalId);\\n\\n    constructor(bytes21 _appId, address _governor) Ownable(msg.sender) {\\n        require(_appId != bytes21(0), \\\"AppId cannot be zero\\\");\\n        require(_governor != address(0), \\\"Governor address cannot be zero\\\");\\n        appId = _appId;\\n        defaultExpirationPeriod = 7 days;\\n        proposalCounter = 0;\\n        governor = IGovernor(_governor);\\n    }\\n\\n    function setGovernor(address _governor) external onlyOwner {\\n        require(_governor != address(0), \\\"Governor address cannot be zero\\\");\\n        governor = IGovernor(_governor);\\n        emit GovernorUpdated(_governor);\\n    }\\n\\n    function proposeQuery(\\n        string calldata sqlQuery,\\n        string calldata publicKey\\n    ) external whenNotPaused nonReentrant returns (uint256) {\\n        require(bytes(sqlQuery).length > 0, \\\"SQL query cannot be empty\\\");\\n        require(bytes(sqlQuery).length <= 1000, \\\"SQL query too long\\\");\\n        require(bytes(publicKey).length > 0, \\\"Public key cannot be empty\\\");\\n\\n        proposalCounter++;\\n        uint256 proposalId = proposalCounter;\\n\\n        QueryProposal memory newProposal = QueryProposal({\\n            id: proposalId,\\n            requester: msg.sender,\\n            sqlQuery: sqlQuery,\\n            publicKey: publicKey,\\n            timestamp: block.timestamp,\\n            expirationTime: block.timestamp + defaultExpirationPeriod,\\n            status: ProposalStatus.Pending,\\n            governanceProposalId: 0\\n        });\\n\\n        proposals[proposalId] = newProposal;\\n        proposalsByStatus[ProposalStatus.Pending].push(proposalId);\\n        userProposals[msg.sender].push(proposalId);\\n\\n        emit ProposalSubmitted(proposalId, msg.sender, sqlQuery);\\n        return proposalId;\\n    }\\n\\n    function createGovernanceProposal(uint256 proposalId) external onlyOwner whenNotPaused nonReentrant {\\n        QueryProposal storage proposal = proposals[proposalId];\\n        require(proposal.id != 0, \\\"Proposal does not exist\\\");\\n        require(proposal.status == ProposalStatus.Pending, \\\"Proposal not pending\\\");\\n        require(proposal.governanceProposalId == 0, \\\"Governance proposal already created\\\");\\n\\n        address[] memory targets = new address[](1);\\n        targets[0] = address(this);\\n\\n        uint256[] memory values = new uint256[](1);\\n        values[0] = 0;\\n\\n        bytes[] memory calldatas = new bytes[](1);\\n        calldatas[0] = abi.encodeWithSignature(\\\"approveProposal(uint256)\\\", proposalId);\\n\\n        string memory description = string(abi.encodePacked(\\n            \\\"Approve query proposal #\\\",\\n            proposalId,\\n            \\\" with SQL: \\\",\\n            proposal.sqlQuery\\n        ));\\n\\n        uint256 governanceProposalId = governor.propose(targets, values, calldatas, description);\\n        \\n        proposal.governanceProposalId = governanceProposalId;\\n        \\n        emit GovernanceProposalCreated(proposalId, governanceProposalId);\\n    }\\n\\n    function approveProposal(uint256 proposalId) external whenNotPaused nonReentrant {\\n        QueryProposal storage proposal = proposals[proposalId];\\n        require(proposal.id != 0, \\\"Proposal does not exist\\\");\\n        require(proposal.status == ProposalStatus.Pending, \\\"Proposal not pending\\\");\\n        require(block.timestamp < proposal.expirationTime, \\\"Proposal expired\\\");\\n        require(proposal.governanceProposalId != 0, \\\"No governance proposal exists\\\");\\n        require(msg.sender == address(governor), \\\"Only governor can approve\\\");\\n        require(!governanceProposalsExecuted[proposal.governanceProposalId], \\\"Proposal already executed\\\");\\n\\n        proposal.status = ProposalStatus.Approved;\\n        governanceProposalsExecuted[proposal.governanceProposalId] = true;\\n\\n        _removeFromStatusArray(ProposalStatus.Pending, proposalId);\\n\\n        proposalsByStatus[ProposalStatus.Approved].push(proposalId);\\n\\n        emit ProposalApproved(proposalId, msg.sender);\\n    }\\n\\n    function rejectProposal(uint256 proposalId) external onlyOwner whenNotPaused nonReentrant {\\n        QueryProposal storage proposal = proposals[proposalId];\\n        require(proposal.id != 0, \\\"Proposal does not exist\\\");\\n        require(proposal.status == ProposalStatus.Pending, \\\"Proposal not pending\\\");\\n\\n        proposal.status = ProposalStatus.Rejected;\\n\\n        _removeFromStatusArray(ProposalStatus.Pending, proposalId);\\n\\n        proposalsByStatus[ProposalStatus.Rejected].push(proposalId);\\n\\n        emit ProposalRejected(proposalId, msg.sender);\\n    }\\n\\n    function getApprovedProposals(uint256 offset, uint256 limit) external view returns (QueryProposal[] memory) {\\n        uint256[] storage approvedIds = proposalsByStatus[ProposalStatus.Approved];\\n\\n        if (offset >= approvedIds.length) {\\n            return new QueryProposal[](0);\\n        }\\n\\n        uint256 resultLength = approvedIds.length - offset;\\n        if (resultLength > limit) {\\n            resultLength = limit;\\n        }\\n\\n        QueryProposal[] memory result = new QueryProposal[](resultLength);\\n        for (uint256 i = 0; i < resultLength; i++) {\\n            result[i] = proposals[approvedIds[offset + i]];\\n        }\\n        return result;\\n    }\\n\\n    function consumeProposal(uint256 proposalId, string calldata encryptedResult) external whenNotPaused nonReentrant {\\n        QueryProposal storage proposal = proposals[proposalId];\\n        require(proposal.id != 0, \\\"Proposal does not exist\\\");\\n        require(proposal.status == ProposalStatus.Approved, \\\"Proposal not approved\\\");\\n        require(block.timestamp < proposal.expirationTime, \\\"Proposal expired\\\");\\n        require(bytes(encryptedResult).length > 0, \\\"Encrypted result cannot be empty\\\");\\n\\n        CompletedQuery memory completedQuery = CompletedQuery({\\n            proposalId: proposalId,\\n            originalQuery: proposal.sqlQuery,\\n            publicKey: proposal.publicKey,\\n            encryptedResult: encryptedResult,\\n            completedTimestamp: block.timestamp\\n        });\\n\\n        completedQueries[proposalId] = completedQuery;\\n        proposal.status = ProposalStatus.Completed;\\n\\n        _removeFromStatusArray(ProposalStatus.Approved, proposalId);\\n\\n        proposalsByStatus[ProposalStatus.Completed].push(proposalId);\\n\\n        emit QueryCompleted(proposalId, proposal.requester);\\n    }\\n\\n    function checkAndUpdateExpiredProposals() external {\\n        _updateExpiredProposals(ProposalStatus.Pending);\\n        _updateExpiredProposals(ProposalStatus.Approved);\\n    }\\n\\n    function _updateExpiredProposals(ProposalStatus status) internal {\\n        uint256[] storage statusProposals = proposalsByStatus[status];\\n\\n        uint256[] memory expiredIds = new uint256[](statusProposals.length);\\n        uint256 expiredCount = 0;\\n\\n        for (uint256 i = 0; i < statusProposals.length; i++) {\\n            uint256 proposalId = statusProposals[i];\\n            QueryProposal storage proposal = proposals[proposalId];\\n            if (block.timestamp >= proposal.expirationTime) {\\n                expiredIds[expiredCount] = proposalId;\\n                expiredCount++;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < expiredCount; i++) {\\n            uint256 proposalId = expiredIds[i];\\n            proposals[proposalId].status = ProposalStatus.Expired;\\n            _removeFromStatusArray(status, proposalId);\\n            proposalsByStatus[ProposalStatus.Expired].push(proposalId);\\n            emit ProposalExpired(proposalId);\\n        }\\n    }\\n\\n    function _removeFromStatusArray(ProposalStatus status, uint256 proposalId) internal {\\n        uint256[] storage statusArray = proposalsByStatus[status];\\n        for (uint256 i = 0; i < statusArray.length; i++) {\\n            if (statusArray[i] == proposalId) {\\n                statusArray[i] = statusArray[statusArray.length - 1];\\n                statusArray.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function setDefaultExpirationPeriod(uint256 period) external onlyOwner {\\n        require(period > 0, \\\"Expiration period must be greater than 0\\\");\\n        require(period <= 365 days, \\\"Expiration period too long\\\");\\n        defaultExpirationPeriod = period;\\n        emit ExpirationPeriodUpdated(period);\\n    }\\n\\n    function extendProposalExpiration(uint256 proposalId, uint256 extension) external onlyOwner {\\n        QueryProposal storage proposal = proposals[proposalId];\\n        require(proposal.id != 0, \\\"Proposal does not exist\\\");\\n        require(extension > 0, \\\"Extension must be greater than 0\\\");\\n        require(extension <= 365 days, \\\"Extension too long\\\");\\n        proposal.expirationTime += extension;\\n    }\\n\\n    function getProposalsByStatus(ProposalStatus status) external view returns (QueryProposal[] memory) {\\n        uint256[] storage proposalIds = proposalsByStatus[status];\\n        QueryProposal[] memory result = new QueryProposal[](proposalIds.length);\\n        for (uint256 i = 0; i < proposalIds.length; i++) {\\n            result[i] = proposals[proposalIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    function getUserProposals(address user) external view returns (QueryProposal[] memory) {\\n        require(user != address(0), \\\"Invalid user address\\\");\\n        uint256[] storage userProposalIds = userProposals[user];\\n        QueryProposal[] memory result = new QueryProposal[](userProposalIds.length);\\n        for (uint256 i = 0; i < userProposalIds.length; i++) {\\n            result[i] = proposals[userProposalIds[i]];\\n        }\\n        return result;\\n    }\\n\\n    function getCompletedQuery(uint256 proposalId) external view returns (CompletedQuery memory) {\\n        require(completedQueries[proposalId].proposalId != 0, \\\"Completed query does not exist\\\");\\n        return completedQueries[proposalId];\\n    }\\n\\n    function getProposal(uint256 proposalId) external view returns (QueryProposal memory) {\\n        require(proposals[proposalId].id != 0, \\\"Proposal does not exist\\\");\\n        return proposals[proposalId];\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function getGovernanceProposalId(uint256 proposalId) external view returns (uint256) {\\n        return proposals[proposalId].governanceProposalId;\\n    }\\n\\n    function isGovernanceProposalExecuted(uint256 governanceProposalId) external view returns (bool) {\\n        return governanceProposalsExecuted[governanceProposalId];\\n    }\\n}\\n\",\"keccak256\":\"0xb82f82916db66a23e0c969f1b8329b05d01a8db922daecc972959e00b0923e36\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806398951b5611610104578063c42cf535116100a2578063dc19e4d911610071578063dc19e4d914610460578063ef78411114610483578063f2fde38b1461048c578063f500d36d1461049f57600080fd5b8063c42cf535146103f6578063c7f758a814610409578063d10b994514610429578063d41327c51461043c57600080fd5b8063a0552cb5116100de578063a0552cb5146103aa578063a51388c8146103bd578063bc28d878146103d0578063bf98f1f5146103e357600080fd5b806398951b561461037c5780639906ee2b1461038f5780639c3c24761461039757600080fd5b80635c975abb1161017c57806380afdea81161014b57806380afdea8146103215780638456cb591461034b5780638da5cb5b146103535780639106447c1461036957600080fd5b80635c975abb146102cb5780635f113bd2146102d6578063715018a6146102f957806378ef11381461030157600080fd5b80631b31527f116101b85780631b31527f1461025a57806324dcbb971461027b5780633bc391b9146102ae5780633f4ba83a146102c357600080fd5b8063013cf08b146101df5780630a9c6db21461020f5780630c340a241461022f575b600080fd5b6101f26101ed366004612aa4565b6104b2565b604051610206989796959493929190612b3b565b60405180910390f35b61022261021d366004612aa4565b610614565b6040516102069190612ba9565b600554610242906001600160a01b031681565b6040516001600160a01b039091168152602001610206565b61026d610268366004612c3e565b610897565b604051908152602001610206565b61029e610289366004612aa4565b600a6020526000908152604090205460ff1681565b6040519015158152602001610206565b6102c16102bc366004612c68565b6108c8565b005b6102c16109b6565b60015460ff1661029e565b61026d6102e4366004612aa4565b60009081526006602052604090206007015490565b6102c16109c8565b61031461030f366004612c8a565b6109da565b6040516102069190612d36565b60035461032e9060581b81565b6040516affffffffffffffffffffff199091168152602001610206565b6102c1610cad565b60015461010090046001600160a01b0316610242565b6102c1610377366004612aa4565b610cbd565b6102c161038a366004612aa4565b610db5565b6102c1611052565b61026d6103a5366004612de1565b611066565b61026d6103b8366004612e5c565b61139e565b6103146103cb366004612e78565b6113ba565b6102c16103de366004612aa4565b61165b565b6103146103f1366004612c68565b611782565b6102c1610404366004612c8a565b611a86565b61041c610417366004612aa4565b611b2e565b6040516102069190612e93565b6102c1610437366004612ea6565b611d1a565b61044f61044a366004612aa4565b6120df565b604051610206959493929190612ef2565b61029e61046e366004612aa4565b6000908152600a602052604090205460ff1690565b61026d60045481565b6102c161049a366004612c8a565b6122a6565b6102c16104ad366004612aa4565b6122e1565b60066020526000908152604090208054600182015460028301805492936001600160a01b03909216926104e490612f44565b80601f016020809104026020016040519081016040528092919081815260200182805461051090612f44565b801561055d5780601f106105325761010080835404028352916020019161055d565b820191906000526020600020905b81548152906001019060200180831161054057829003601f168201915b50505050509080600301805461057290612f44565b80601f016020809104026020016040519081016040528092919081815260200182805461059e90612f44565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b5050506004840154600585015460068601546007909601549495919490935060ff909116915088565b6106466040518060a0016040528060008152602001606081526020016060815260200160608152602001600081525090565b60008281526009602052604081205490036106a85760405162461bcd60e51b815260206004820152601e60248201527f436f6d706c6574656420717565727920646f6573206e6f74206578697374000060448201526064015b60405180910390fd5b600960008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546106e090612f44565b80601f016020809104026020016040519081016040528092919081815260200182805461070c90612f44565b80156107595780601f1061072e57610100808354040283529160200191610759565b820191906000526020600020905b81548152906001019060200180831161073c57829003601f168201915b5050505050815260200160028201805461077290612f44565b80601f016020809104026020016040519081016040528092919081815260200182805461079e90612f44565b80156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b5050505050815260200160038201805461080490612f44565b80601f016020809104026020016040519081016040528092919081815260200182805461083090612f44565b801561087d5780601f106108525761010080835404028352916020019161087d565b820191906000526020600020905b81548152906001019060200180831161086057829003601f168201915b505050505081526020016004820154815250509050919050565b600860205281600052604060002081815481106108b357600080fd5b90600052602060002001600091509150505481565b6108d06125c0565b600082815260066020526040812080549091036108ff5760405162461bcd60e51b815260040161069f90612f7e565b6000821161094f5760405162461bcd60e51b815260206004820181905260248201527f457874656e73696f6e206d7573742062652067726561746572207468616e2030604482015260640161069f565b6301e133808211156109985760405162461bcd60e51b8152602060048201526012602482015271457874656e73696f6e20746f6f206c6f6e6760701b604482015260640161069f565b818160050160008282546109ac9190612fcb565b9091555050505050565b6109be6125c0565b6109c66125f3565b565b6109d06125c0565b6109c66000612645565b60606001600160a01b038216610a295760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b604482015260640161069f565b6001600160a01b0382166000908152600860205260408120805490919067ffffffffffffffff811115610a5e57610a5e612fde565b604051908082528060200260200182016040528015610a9757816020015b610a84612a45565b815260200190600190039081610a7c5790505b50905060005b8254811015610ca55760066000848381548110610abc57610abc612ff4565b6000918252602080832090910154835282810193909352604091820190208151610100810183528154815260018201546001600160a01b0316938101939093526002810180549192840191610b1090612f44565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3c90612f44565b8015610b895780601f10610b5e57610100808354040283529160200191610b89565b820191906000526020600020905b815481529060010190602001808311610b6c57829003601f168201915b50505050508152602001600382018054610ba290612f44565b80601f0160208091040260200160405190810160405280929190818152602001828054610bce90612f44565b8015610c1b5780601f10610bf057610100808354040283529160200191610c1b565b820191906000526020600020905b815481529060010190602001808311610bfe57829003601f168201915b5050509183525050600482810154602083015260058301546040830152600683015460609092019160ff1690811115610c5657610c56612b03565b6004811115610c6757610c67612b03565b8152602001600782015481525050828281518110610c8757610c87612ff4565b60200260200101819052508080610c9d9061300a565b915050610a9d565b509392505050565b610cb56125c0565b6109c661269f565b610cc56125c0565b60008111610d265760405162461bcd60e51b815260206004820152602860248201527f45787069726174696f6e20706572696f64206d75737420626520677265617465604482015267072207468616e20360c41b606482015260840161069f565b6301e13380811115610d7a5760405162461bcd60e51b815260206004820152601a60248201527f45787069726174696f6e20706572696f6420746f6f206c6f6e67000000000000604482015260640161069f565b60048190556040518181527f76d8424a884e28db7e90e432ac1d427e98ff82b7a50c54396ec417873a8a98559060200160405180910390a150565b610dbd6126da565b610dc56126fe565b60008181526006602052604081208054909103610df45760405162461bcd60e51b815260040161069f90612f7e565b6000600682015460ff166004811115610e0f57610e0f612b03565b14610e2c5760405162461bcd60e51b815260040161069f90613023565b80600501544210610e725760405162461bcd60e51b815260206004820152601060248201526f141c9bdc1bdcd85b08195e1c1a5c995960821b604482015260640161069f565b8060070154600003610ec65760405162461bcd60e51b815260206004820152601d60248201527f4e6f20676f7665726e616e63652070726f706f73616c20657869737473000000604482015260640161069f565b6005546001600160a01b03163314610f205760405162461bcd60e51b815260206004820152601960248201527f4f6e6c7920676f7665726e6f722063616e20617070726f766500000000000000604482015260640161069f565b60078101546000908152600a602052604090205460ff1615610f845760405162461bcd60e51b815260206004820152601960248201527f50726f706f73616c20616c726561647920657865637574656400000000000000604482015260640161069f565b6006810180546001919060ff19168280021790555060078101546000908152600a60205260408120805460ff19166001179055610fc19083612728565b60076020527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b828805460018101825560009182527fb2401e68d452ad3af4aed95d6e19d1a690ed00a9a5bee1b2b0a83b6028446a4f01839055604051339184917f049c28adfe50bcf1b76fd95273b6a24566b9f377e52fddc653c3355248dad07a9190a35061104f6001600055565b50565b61105c600061281e565b6109c6600161281e565b60006110706126da565b6110786126fe565b836110c55760405162461bcd60e51b815260206004820152601960248201527f53514c2071756572792063616e6e6f7420626520656d70747900000000000000604482015260640161069f565b6103e884111561110c5760405162461bcd60e51b815260206004820152601260248201527153514c20717565727920746f6f206c6f6e6760701b604482015260640161069f565b816111595760405162461bcd60e51b815260206004820152601a60248201527f5075626c6963206b65792063616e6e6f7420626520656d707479000000000000604482015260640161069f565b600280549060006111698361300a565b90915550506002546040805161010081018252828152336020808301919091528251601f890182900482028101820184528881526000938301918a908a9081908401838280828437600092019190915250505090825250604080516020601f890181900481028201810190925287815291810191908890889081908401838280828437600092019190915250505090825250426020820181905260045460409092019161121591612fcb565b815260200160008152600060209182018190528481526006825260409081902083518155918301516001830180546001600160a01b0319166001600160a01b0390921691909117905582015191925082916002820190611275908261309f565b506060820151600382019061128a908261309f565b506080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff021916908360048111156112c9576112c9612b03565b021790555060e091909101516007909101557f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df805460018082019092557fd9e659536a2f603b20938d4b8c1783b32b56367744f7b53b49ad35612a31e7ca018390553360008181526008602090815260408083208054958601815583529120909201849055905183907fba63161e1c7e096aaf63cb63b137eeea26b870df0007c6e2ad029bae55d6517990611381908b908b9061315f565b60405180910390a35090506113966001600055565b949350505050565b600760205281600052604060002081815481106108b357600080fd5b60606000600760008460048111156113d4576113d4612b03565b60048111156113e5576113e5612b03565b815260200190815260200160002090506000818054905067ffffffffffffffff81111561141457611414612fde565b60405190808252806020026020018201604052801561144d57816020015b61143a612a45565b8152602001906001900390816114325790505b50905060005b8254811015610ca5576006600084838154811061147257611472612ff4565b6000918252602080832090910154835282810193909352604091820190208151610100810183528154815260018201546001600160a01b03169381019390935260028101805491928401916114c690612f44565b80601f01602080910402602001604051908101604052809291908181526020018280546114f290612f44565b801561153f5780601f106115145761010080835404028352916020019161153f565b820191906000526020600020905b81548152906001019060200180831161152257829003601f168201915b5050505050815260200160038201805461155890612f44565b80601f016020809104026020016040519081016040528092919081815260200182805461158490612f44565b80156115d15780601f106115a6576101008083540402835291602001916115d1565b820191906000526020600020905b8154815290600101906020018083116115b457829003601f168201915b5050509183525050600482810154602083015260058301546040830152600683015460609092019160ff169081111561160c5761160c612b03565b600481111561161d5761161d612b03565b815260200160078201548152505082828151811061163d5761163d612ff4565b602002602001018190525080806116539061300a565b915050611453565b6116636125c0565b61166b6126da565b6116736126fe565b600081815260066020526040812080549091036116a25760405162461bcd60e51b815260040161069f90612f7e565b6000600682015460ff1660048111156116bd576116bd612b03565b146116da5760405162461bcd60e51b815260040161069f90613023565b60068101805460ff191660031790556116f4600083612728565b60076020527f3be6fd20d5acfde5b873b48692cd31f4d3c7e8ee8a813af4696af8859e5ca6c6805460018101825560009182527f48e46e930050f65986e1bdb8c4b43524c07bb9ab6005239ef508bfb4ceceb30101839055604051339184917fff556cafc8033c441c6fea0e40d12f0ec0c8c9168f6bac576e84800331b1a52f9190a35061104f6001600055565b600160005260076020527fb39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82880546060919084106117f35760408051600080825260208201909252906117ea565b6117d7612a45565b8152602001906001900390816117cf5790505b50915050611a80565b805460009061180390869061318e565b9050838111156118105750825b60008167ffffffffffffffff81111561182b5761182b612fde565b60405190808252806020026020018201604052801561186457816020015b611851612a45565b8152602001906001900390816118495790505b50905060005b82811015611a7a576006600085611881848b612fcb565b8154811061189157611891612ff4565b6000918252602080832090910154835282810193909352604091820190208151610100810183528154815260018201546001600160a01b03169381019390935260028101805491928401916118e590612f44565b80601f016020809104026020016040519081016040528092919081815260200182805461191190612f44565b801561195e5780601f106119335761010080835404028352916020019161195e565b820191906000526020600020905b81548152906001019060200180831161194157829003601f168201915b5050505050815260200160038201805461197790612f44565b80601f01602080910402602001604051908101604052809291908181526020018280546119a390612f44565b80156119f05780601f106119c5576101008083540402835291602001916119f0565b820191906000526020600020905b8154815290600101906020018083116119d357829003601f168201915b5050509183525050600482810154602083015260058301546040830152600683015460609092019160ff1690811115611a2b57611a2b612b03565b6004811115611a3c57611a3c612b03565b8152602001600782015481525050828281518110611a5c57611a5c612ff4565b60200260200101819052508080611a729061300a565b91505061186a565b50925050505b92915050565b611a8e6125c0565b6001600160a01b038116611ae45760405162461bcd60e51b815260206004820152601f60248201527f476f7665726e6f7220616464726573732063616e6e6f74206265207a65726f00604482015260640161069f565b600580546001600160a01b0319166001600160a01b0383169081179091556040517f386c8d5fb4be6c928b7de4c7ae0a4b2ad0d2b2a7edad65d9f0af9ba255e5121990600090a250565b611b36612a45565b6000828152600660205260408120549003611b635760405162461bcd60e51b815260040161069f90612f7e565b6000828152600660209081526040918290208251610100810184528154815260018201546001600160a01b0316928101929092526002810180549293919291840191611bae90612f44565b80601f0160208091040260200160405190810160405280929190818152602001828054611bda90612f44565b8015611c275780601f10611bfc57610100808354040283529160200191611c27565b820191906000526020600020905b815481529060010190602001808311611c0a57829003601f168201915b50505050508152602001600382018054611c4090612f44565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6c90612f44565b8015611cb95780601f10611c8e57610100808354040283529160200191611cb9565b820191906000526020600020905b815481529060010190602001808311611c9c57829003601f168201915b5050509183525050600482810154602083015260058301546040830152600683015460609092019160ff1690811115611cf457611cf4612b03565b6004811115611d0557611d05612b03565b81526020016007820154815250509050919050565b611d226126da565b611d2a6126fe565b60008381526006602052604081208054909103611d595760405162461bcd60e51b815260040161069f90612f7e565b6001600682015460ff166004811115611d7457611d74612b03565b14611db95760405162461bcd60e51b8152602060048201526015602482015274141c9bdc1bdcd85b081b9bdd08185c1c1c9bdd9959605a1b604482015260640161069f565b80600501544210611dff5760405162461bcd60e51b815260206004820152601060248201526f141c9bdc1bdcd85b08195e1c1a5c995960821b604482015260640161069f565b81611e4c5760405162461bcd60e51b815260206004820181905260248201527f456e6372797074656420726573756c742063616e6e6f7420626520656d707479604482015260640161069f565b60006040518060a00160405280868152602001836002018054611e6e90612f44565b80601f0160208091040260200160405190810160405280929190818152602001828054611e9a90612f44565b8015611ee75780601f10611ebc57610100808354040283529160200191611ee7565b820191906000526020600020905b815481529060010190602001808311611eca57829003601f168201915b50505050508152602001836003018054611f0090612f44565b80601f0160208091040260200160405190810160405280929190818152602001828054611f2c90612f44565b8015611f795780601f10611f4e57610100808354040283529160200191611f79565b820191906000526020600020905b815481529060010190602001808311611f5c57829003601f168201915b5050505050815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250938552505042602093840152508781526009825260409020825181559082015191925082916001820190611fe9908261309f565b5060408201516002820190611ffe908261309f565b5060608201516003820190612013908261309f565b506080919091015160049091015560068201805460ff1916600217905561203b600186612728565b60076020527fb7c774451310d1be4108bc180d1b52823cb0ee0274a6c0081bcaf94f115fb96d80546001808201835560009283527fd6de725bb48e0bc629c0e827168a68e25f0ced693aa574d8ae15b651380a01c99091018790558301546040516001600160a01b039091169187917fbf992d8243706b70d87ca62d0f26d6926cfac05b0f8f15097c0548be335436e09190a350506120da6001600055565b505050565b6009602052600090815260409020805460018201805491929161210190612f44565b80601f016020809104026020016040519081016040528092919081815260200182805461212d90612f44565b801561217a5780601f1061214f5761010080835404028352916020019161217a565b820191906000526020600020905b81548152906001019060200180831161215d57829003601f168201915b50505050509080600201805461218f90612f44565b80601f01602080910402602001604051908101604052809291908181526020018280546121bb90612f44565b80156122085780601f106121dd57610100808354040283529160200191612208565b820191906000526020600020905b8154815290600101906020018083116121eb57829003601f168201915b50505050509080600301805461221d90612f44565b80601f016020809104026020016040519081016040528092919081815260200182805461224990612f44565b80156122965780601f1061226b57610100808354040283529160200191612296565b820191906000526020600020905b81548152906001019060200180831161227957829003601f168201915b5050505050908060040154905085565b6122ae6125c0565b6001600160a01b0381166122d857604051631e4fbdf760e01b81526000600482015260240161069f565b61104f81612645565b6122e96125c0565b6122f16126da565b6122f96126fe565b600081815260066020526040812080549091036123285760405162461bcd60e51b815260040161069f90612f7e565b6000600682015460ff16600481111561234357612343612b03565b146123605760405162461bcd60e51b815260040161069f90613023565b6007810154156123be5760405162461bcd60e51b815260206004820152602360248201527f476f7665726e616e63652070726f706f73616c20616c726561647920637265616044820152621d195960ea1b606482015260840161069f565b6040805160018082528183019092526000916020808301908036833701905050905030816000815181106123f4576123f4612ff4565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060008160008151811061244657612446612ff4565b6020908102919091010152604080516001808252818301909252600091816020015b60608152602001906001900390816124685750506040516024810187905290915060440160408051601f198184030181529190526020810180516001600160e01b0316634c4a8dab60e11b179052815182906000906124c9576124c9612ff4565b6020026020010181905250600085856002016040516020016124ec9291906131a1565b60408051601f1981840301815290829052600554633eaf40f160e11b83529092506000916001600160a01b0390911690637d5e81e2906125369088908890889088906004016132b6565b6020604051808303816000875af1158015612555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125799190613362565b60078701819055604051909150819088907f9a19cf88b0f71b4ca56203453f92dd63e26bf29cae805af2f5eaa9114291643590600090a350505050505061104f6001600055565b6001546001600160a01b036101009091041633146109c65760405163118cdaa760e01b815233600482015260240161069f565b6125fb612a22565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600180546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6126a76126da565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833612628565b60015460ff16156109c65760405163d93c066560e01b815260040160405180910390fd5b60026000540361272157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b60006007600084600481111561274057612740612b03565b600481111561275157612751612b03565b8152602001908152602001600020905060005b8154811015612818578282828154811061278057612780612ff4565b90600052602060002001540361280657815482906127a09060019061318e565b815481106127b0576127b0612ff4565b90600052602060002001548282815481106127cd576127cd612ff4565b9060005260206000200181905550818054806127eb576127eb61337b565b60019003818190600052602060002001600090559055612818565b806128108161300a565b915050612764565b50505050565b60006007600083600481111561283657612836612b03565b600481111561284757612847612b03565b815260200190815260200160002090506000818054905067ffffffffffffffff81111561287657612876612fde565b60405190808252806020026020018201604052801561289f578160200160208202803683370190505b5090506000805b83548110156129335760008482815481106128c3576128c3612ff4565b9060005260206000200154905060006006600083815260200190815260200160002090508060050154421061291e578185858151811061290557612905612ff4565b60209081029190910101528361291a8161300a565b9450505b5050808061292b9061300a565b9150506128a6565b5060005b81811015612a1b57600083828151811061295357612953612ff4565b602090810291909101810151600081815260069283905260409020909101805460ff1916600417905590506129888682612728565b60076020527fb805995a7ec585a251200611a61d179cfd7fb105e1ab17dc415a7336783786f7805460018101825560009182527f6fa1f58b3824c63c18ca6e537b6f3417074dc1ba12da98b635f52a4ad36f34d40182905560405182917f88e53c486703527139dfc8d97a1e559d9bd93d3f9d52cda4e06564111e7a264391a25080612a138161300a565b915050612937565b5050505050565b60015460ff166109c657604051638dfc202b60e01b815260040160405180910390fd5b6040518061010001604052806000815260200160006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160006004811115612a9757612a97612b03565b8152602001600081525090565b600060208284031215612ab657600080fd5b5035919050565b6000815180845260005b81811015612ae357602081850181015186830182015201612ac7565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b60058110612b3757634e487b7160e01b600052602160045260246000fd5b9052565b8881526001600160a01b038816602082015261010060408201819052600090612b668382018a612abd565b90508281036060840152612b7a8189612abd565b9150508560808301528460a0830152612b9660c0830185612b19565b8260e08301529998505050505050505050565b60208152815160208201526000602083015160a06040840152612bcf60c0840182612abd565b90506040840151601f1980858403016060860152612bed8383612abd565b9250606086015191508085840301608086015250612c0b8282612abd565b915050608084015160a08401528091505092915050565b80356001600160a01b0381168114612c3957600080fd5b919050565b60008060408385031215612c5157600080fd5b612c5a83612c22565b946020939093013593505050565b60008060408385031215612c7b57600080fd5b50508035926020909101359150565b600060208284031215612c9c57600080fd5b612ca582612c22565b9392505050565b60006101008251845260018060a01b0360208401511660208501526040830151816040860152612cde82860182612abd565b91505060608301518482036060860152612cf88282612abd565b9150506080830151608085015260a083015160a085015260c0830151612d2160c0860182612b19565b5060e083015160e08501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612d8b57603f19888603018452612d79858351612cac565b94509285019290850190600101612d5d565b5092979650505050505050565b60008083601f840112612daa57600080fd5b50813567ffffffffffffffff811115612dc257600080fd5b602083019150836020828501011115612dda57600080fd5b9250929050565b60008060008060408587031215612df757600080fd5b843567ffffffffffffffff80821115612e0f57600080fd5b612e1b88838901612d98565b90965094506020870135915080821115612e3457600080fd5b50612e4187828801612d98565b95989497509550505050565b803560058110612c3957600080fd5b60008060408385031215612e6f57600080fd5b612c5a83612e4d565b600060208284031215612e8a57600080fd5b612ca582612e4d565b602081526000612ca56020830184612cac565b600080600060408486031215612ebb57600080fd5b83359250602084013567ffffffffffffffff811115612ed957600080fd5b612ee586828701612d98565b9497909650939450505050565b85815260a060208201526000612f0b60a0830187612abd565b8281036040840152612f1d8187612abd565b90508281036060840152612f318186612abd565b9150508260808301529695505050505050565b600181811c90821680612f5857607f821691505b602082108103612f7857634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526017908201527f50726f706f73616c20646f6573206e6f74206578697374000000000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611a8057611a80612fb5565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161301c5761301c612fb5565b5060010190565b60208082526014908201527350726f706f73616c206e6f742070656e64696e6760601b604082015260600190565b601f8211156120da57600081815260208120601f850160051c810160208610156130785750805b601f850160051c820191505b8181101561309757828155600101613084565b505050505050565b815167ffffffffffffffff8111156130b9576130b9612fde565b6130cd816130c78454612f44565b84613051565b602080601f83116001811461310257600084156130ea5750858301515b600019600386901b1c1916600185901b178555613097565b600085815260208120601f198616915b8281101561313157888601518255948401946001909101908401613112565b508582101561314f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b81810381811115611a8057611a80612fb5565b7f417070726f76652071756572792070726f706f73616c2023000000000000000081528260188201526a0103bb4ba341029a8a61d160ad1b603882015260006043600084546131ef81612f44565b60018281168015613207576001811461322057613253565b60ff198416888701528215158302880186019450613253565b8860005260208060002060005b858110156132485781548b82018a015290840190820161322d565b505050858389010194505b509298975050505050505050565b600081518084526020808501808196508360051b8101915082860160005b858110156132a9578284038952613297848351612abd565b9885019893509084019060010161327f565b5091979650505050505050565b6080808252855190820181905260009060209060a0840190828901845b828110156132f85781516001600160a01b0316845292840192908401906001016132d3565b5050508381038285015286518082528783019183019060005b8181101561332d57835183529284019291840191600101613311565b505084810360408601526133418188613261565b9250505082810360608401526133578185612abd565b979650505050505050565b60006020828403121561337457600080fd5b5051919050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220759077f20cdc4a4d2aa81f3f77374aa8ae93ab814d91891064431722719d7dfc64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7389,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7279,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 387,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_owner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15784,
        "contract": "contracts/Vault.sol:Vault",
        "label": "proposalCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15786,
        "contract": "contracts/Vault.sol:Vault",
        "label": "appId",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes21"
      },
      {
        "astId": 15788,
        "contract": "contracts/Vault.sol:Vault",
        "label": "defaultExpirationPeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 15791,
        "contract": "contracts/Vault.sol:Vault",
        "label": "governor",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IGovernor)2811"
      },
      {
        "astId": 15796,
        "contract": "contracts/Vault.sol:Vault",
        "label": "proposals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(QueryProposal)15771_storage)"
      },
      {
        "astId": 15802,
        "contract": "contracts/Vault.sol:Vault",
        "label": "proposalsByStatus",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(ProposalStatus)15753,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 15807,
        "contract": "contracts/Vault.sol:Vault",
        "label": "userProposals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 15812,
        "contract": "contracts/Vault.sol:Vault",
        "label": "completedQueries",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(CompletedQuery)15782_storage)"
      },
      {
        "astId": 15816,
        "contract": "contracts/Vault.sol:Vault",
        "label": "governanceProposalsExecuted",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes21": {
        "encoding": "inplace",
        "label": "bytes21",
        "numberOfBytes": "21"
      },
      "t_contract(IGovernor)2811": {
        "encoding": "inplace",
        "label": "contract IGovernor",
        "numberOfBytes": "20"
      },
      "t_enum(ProposalStatus)15753": {
        "encoding": "inplace",
        "label": "enum Vault.ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_enum(ProposalStatus)15753,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(ProposalStatus)15753",
        "label": "mapping(enum Vault.ProposalStatus => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(CompletedQuery)15782_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.CompletedQuery)",
        "numberOfBytes": "32",
        "value": "t_struct(CompletedQuery)15782_storage"
      },
      "t_mapping(t_uint256,t_struct(QueryProposal)15771_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault.QueryProposal)",
        "numberOfBytes": "32",
        "value": "t_struct(QueryProposal)15771_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CompletedQuery)15782_storage": {
        "encoding": "inplace",
        "label": "struct Vault.CompletedQuery",
        "members": [
          {
            "astId": 15773,
            "contract": "contracts/Vault.sol:Vault",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15775,
            "contract": "contracts/Vault.sol:Vault",
            "label": "originalQuery",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 15777,
            "contract": "contracts/Vault.sol:Vault",
            "label": "publicKey",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 15779,
            "contract": "contracts/Vault.sol:Vault",
            "label": "encryptedResult",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 15781,
            "contract": "contracts/Vault.sol:Vault",
            "label": "completedTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(QueryProposal)15771_storage": {
        "encoding": "inplace",
        "label": "struct Vault.QueryProposal",
        "members": [
          {
            "astId": 15755,
            "contract": "contracts/Vault.sol:Vault",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15757,
            "contract": "contracts/Vault.sol:Vault",
            "label": "requester",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 15759,
            "contract": "contracts/Vault.sol:Vault",
            "label": "sqlQuery",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 15761,
            "contract": "contracts/Vault.sol:Vault",
            "label": "publicKey",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 15763,
            "contract": "contracts/Vault.sol:Vault",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15765,
            "contract": "contracts/Vault.sol:Vault",
            "label": "expirationTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15768,
            "contract": "contracts/Vault.sol:Vault",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(ProposalStatus)15753"
          },
          {
            "astId": 15770,
            "contract": "contracts/Vault.sol:Vault",
            "label": "governanceProposalId",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}